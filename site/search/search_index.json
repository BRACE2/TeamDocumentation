{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Bridges Hwy8/Meloland Overpass: sourc: https://github.com/BRACE2/Caltrans.Meloland/ cesmd: CE01336 calid: 58-0215 Lake Crowley: cesmd: CE54730 calid: 47-0048 Painter Street Overpass: cesmd: CE89324 # also CE89462 calid: 04-0236 San Bernardino - I10/215 Interchange: cesmd: CE23631 calid: 54-823G Hayward Route 580/238 Separation: cesmd: CE58658 calid: 33-0214L Tools The following tools are being developed as part of the BRACE2 project. QuakeIO A library of utilities for parsing ground motion files. MotionAPI Ground motion management system. PyG3 High-level threadsafe bindings to the OpenSees framework. Each tool has been designed to closely follow best practices for their respective technology stacks, and extensive documentation for both their design and use is being developed in order to support a maintainable code base. All tools maintain an associated set of validation and verification tests which are integrated into a continuous integration workflow. Various badges are displayed on each tool page to indicate the status and health of the code base. For example, the following badge: on the QuakeIO tool page indicates whether or not the test suite is currently passing. strongmotioncenter.org/stationmap_worldwide/all_stations.php","title":""},{"location":"notes/","text":"Notes 1","title":"Notes\n"},{"location":"notes/1/","text":"Memo 1: Web Security Concerns for the First MotionAPI Beta-Release This memo collects various resources concerning web security, and lays a foundation for the security of the MotionAPI developed for the BRACE2 project. The MotionAPI currently uses JWT authentication tokens that are created in-house and tightly controlled. The following resources may be useful for further assessing the security of the MotionAPI and other web services which may be incorporated into the BRACE2 project. OWASP Application Security Verification Standard NIST Guide to Secure Web Services Best practices 4 Most Used REST API Authentication Methods Choosing an Authentication Method Why and when to use API keys","title":"Memo 1: Web Security Concerns for the First MotionAPI Beta-Release\n"},{"location":"notes/2/","text":"Standard representation of ground motion data","title":"Standard representation of ground motion data\n"},{"location":"tools/MotionAPI/","text":"Motion API The BRACE2 MotionAPI provides a controlled point of contact for sharing and managing ground motion records in real time. The tool consists of a \u201cbackend\u201d server application, and a \u201cfrontend\u201d web application. The backend provides a REST API which acts as the controlled point of contact, through which all data passes. This endpoint can be programatically accessed in a uniform manner from virtually any programming language (see the documentation for examples in Python, Shell, Go, Rust and more). Examples Design","title":"Motion API\n"},{"location":"tools/MotionAPI/design/","text":"Design THIS PAGE IS UNDER DEVELOPMENT File uploads are send as HTTP POST operations with a MIME type of multipart/form-data ([RFC 2046]). Frontends REST API The REST API is integrated directly into the Django application. React web app The frontend web app is built using ReactJS. Backend The backend application is comprised of the server, REST API, Database, and authentication mechanism. Server This is a Python application that is written using the Django framework. This application listens to a server port for API requests, and fulfills these requests by interacting with the database. Authentication Authentication Database The application database is responsible for storing metadata for earthquake records. This database is built using the SQLite database management system, but nearly all operations are performed in the background by the Django Python library. API api/events/ Return all existing events.","title":"Design\n"},{"location":"tools/MotionAPI/examples/","text":"API Examples This page collects examples which demonstrate interactions with the API from various programming languages. Get all motions Python Shell ( curl ) #!/bin/sh hostname = \"localhost:8000\" username = \"brace2\" password = \"brace2\" event_id = \" $1 \" curl -X GET \\ -H 'Content-Type:Application/JSON' \\ -u $username : $password \\ $hostname /api/events/ printf \"\\n\" Upload a new motion In the following examples, a string variable named event_file is used to store the name of the ground motion file to be uploaded. Python import sys import json import requests # Payload parameters # ---------------------------------- name = sys.argv[ 1 ] event_file = \"/home/claudio/pkgs/quakeio/dat/58658_007_20210426_10.09.54.P.zip\" # Framework parameters # ---------------------------------- username, password = [ \"brace2\" ] * 2 hostname = \"http://localhost:8000\" # Setup API request # ---------------------------------- headers = { \"Content-Type\" : \"multipart/form-data\" , } files = { \"event_file\" : (event_file, open (event_file, \"rb\" )), \"name\" : ( None , name), } response = requests.post( hostname + \"/api/events/\" , headers = headers, files = files, auth = (username, password) ) print (json.loads(response)) Shell ( curl )","title":"API Examples\n"},{"location":"tools/MotionAPI/schema/","text":"","title":""},{"location":"tools/Scripts/","text":"Scripts/","title":"Scripts/\n"},{"location":"tools/pyg3/","text":"PyG3 PyG3 is a Python library which exposes a high-level interface to OpenSees Documentation is under development","title":"PyG3\n"},{"location":"tools/quakeio/","text":"quake-io QuakeIO is a library of utilities for parsing and processing ground motion files. All data is serialized into a standardized JSON representation with a strictly defined schema . Interfaces are provided for Python, Matlab, and the command line. The following table summarizes the file formats which are currently supported: Format Read Write Reference Data Type [quakeio.]json \u2611 \u2611 schema any csmip.v2 \u2611 \u2610 CSMIP C/S csmip.zip \u2611 \u2610 E/R/C/S eqsig \u2611 \u2611 eqsig opensees \u2610 \u2611 PEER.NGA \u2611 \u2610 Design Ground motion data is represented by compositions of the following data types/containers: QuakeSeries is an array-like data type which contains a single time series, and associated metadata like peak values and units. All data contained by this type is generally closely related to a single physical quantity or measurement . An example of a file format which parses to this type is the PEER NGA .AT2 file. QuakeComponent is a collection of QuakeSeries types which generally represents time series data (e.g. acceleration, velocity, displacement) which were collected in a single direction . An example of a file format that parses into this type is the CSMIP Volume 2 ( .V2 ) spec. QuakeMotion is a collection of QuakeComponent types which all pertain to a single shared spacial location . The data contained by this type is generally free of any spacial variation. QuakeCollection is a collection of QuakeMotion types, often corresponding to a single site . An example of a file format that parses into this type is the CSMIP processed archive ( .zip ). The core functionality of the library is exposed by the quakeio.read(filename, format = None ) function. This function will return an object either of type (1), (2) or (3), depending on the format of the file that was parsed. For example, the return value of read when parsing a PEER NGA file (file extension .AT2 ), is a QuakeSeries with acceleration data. When parsing a CSMIP Volume 2 file the return is a QuakeComponent containing QuakeSeries instances for acceleration, velocity and displacement values, and when parsing a zip archive of such files, a QuakeCollection is returned. When used via the Python library, these types are overloaded with mathematical operations allowing for concise and expressive post-processing. For example, given two QuakeMotion objects top and bot , representing the motion at the top and bottom of a bridge column, respectively, their relative motion is simply computed as follows: >>> top - bot QuakeMotion( \"Hayward\" ) The resulting QuakeMotion has acceleration, velocity and displacement components all equal to the respective difference between those of top and bot . These operations are further developed in Example:Hayward Tooling and Standards Verification, Validation, and Continuous Integration The tests/ directory of the source code tree contains a suite of integration tests. An automated continuous integration workflow ensures that these tests are executed everytime that a change to the source code is pushed back to the upstream repository. Python Library Reference readf(file, format) Command Line Interface usage: quakeio [MODE] [OPTIONS] [FILE] Options: -c/--calculate COMMAND -f/--from FORMAT -t/--to FORMAT $ quakeio -a rot:30 chan001.v2 -t html Rotate and calculate Husid series. $ quakeio -c 'rot:30;husid;' chan001.v2 $ cat chan001.v2 | quakeio -a rot:30 -f csmip.v2 -t html | pandoc -f html -t pdf $ cat chan001.v2 \\ | quakeio -a rot:30 -f csmip.v2 -t html -x [ * ].data \\ | pandoc -f html -t pdf MATLAB Interface Motion = quakeIO . read ( 'csmip.zip' )","title":"quake-io\n"},{"location":"tools/quakeio/examples/","text":"Examples for the QuakeIO Library Seismic event analysis (Meloland Overpass) Limit state evaluation (Hayward Interchange) System Identification (Painter Street Overpass)","title":"Examples for the `QuakeIO` Library\n"},{"location":"tools/quakeio/examples/basic/","text":"Basic Operations Basics Python import quakeio csmip_event = quakeio.read( \"dat/58658_007_20210426_10.09.54.P.zip\" ) record = csmip_event[ \"bent_4_north_column_grnd_level\" ] component = record[ \"long\" ] series = component.accel series.plot() # #csmip_event[\"chan001\"].plot() # #csmip_event[\"chan001\"].plot_spect()","title":"Basic Operations\n"},{"location":"tools/quakeio/examples/embedded-svg/","text":"Embedded SVG Output # [----------OPTIONS---------] [-FILE-] quakeio -tsvg --embed-in layout.svg data.zip # [----------OPTIONS---------] [-FILE-] quakeio -tsvg --embed-in layout.svg data.zip --plot su,psa,psv","title":"Embedded SVG Output\n"},{"location":"tools/quakeio/examples/hayward/","text":"Drift Demands (Hayward) This example uses the quakeio package to parse a collection of ground motion records and calculate drift demands. import quakeio import quakeio.processing as spec # file_name = \"../dat/58658_007_20210426_10.09.54.P.zip\" file_name = \"../dat/nc73654060_ce58658p.zip\" collection = quakeio.read(file_name, \"csmip.zip\" ) top = collection.at(key = \"bent_4_north_column_top\" ) bot = collection.at(key = \"bent_4_north_column_grnd_level\" ) spec.plot_grid(series = [top.tran.displ, bot.tran.displ], label = [ \"Structure\" , \"Ground\" ]) inches_to_cm = 2.54 height = 47.0 * 12.0 * inches_to_cm relative_resp = (top - bot). slice ( 28. , 60. ) # relative_resp is a QuakeMotion with long,tran,vert series ax = relative_resp. long .displ.plot() ax = relative_resp.tran.displ.plot(ax = ax) ax = relative_resp.resultant().displ.plot(ax = ax) print ((top - bot).resultant().displ[ \"peak_value\" ] / height) print ((top - bot).tran.displ[ \"peak_value\" ] / height) 5.7846756828653446e-05 -5.362784106773887e-05 # for component in collection.components: # spec.Spectrum(component, damping=[0.0, 0.01]).plot() spec.TransferFunction((top. long ,bot. long ), damping = [ 0.001 , 0.01 , 0.05 ]).plot() ; spec.Spectrum(bot. long , damping = [ 0.0 , 0.01 ]).plot() <AxesSubplot:title={'center':'Response spectrum (Chn. 12)'}, xlabel='Period, (sec.)'>","title":"Drift Demands (Hayward)\n"},{"location":"tools/quakeio/examples/meloland/","text":"Event analysis (Meloland) This notebook uses the quakeio Python package to parse and process a suite of ground motion files. Meloland Overpass schematic placement of sensors import numpy as np import quakeio import quakeio.processing as spec The following file contains a collection of ground motions in the CSMIP Volume 2 format from the 1979 Imperial Valley earthquake (obtained from www.strongmotioncenter.org). file_name = \"../dat/imperialvalley79_ce01336p.zip\" The signature of the function quakeio.read is as follows: def read(filename: str , format : str = None , ** parser_options): ... However, in this case the format argument can be ommited because the CSMIP archive parser is the default parser for files with a .zip extension. collection = quakeio.read(file_name, exclusions = [ \"filter*\" ]) The variable collection now holds a QuakeCollection . Once the collection has been parsed, individual components can be extracted using the .at method of QuakeCollection component = collection.at(file_name = \"chan02.v2\" .upper()) Acceleration Spectra spec.Spectrum(component, damping = [ 0.0 , 0.01 , 0.05 ]).plot() ; spec.Spectrum(bot. long , damping = [ 0.0 , 0.01 ]).spect(bot. long ).shape motion. long .veloc.data[ - 1 ] component","title":"Event analysis (Meloland)\n"},{"location":"tools/quakeio/examples/system_id-painter/","text":"System Identification (Painter Street Overpass) Painter Street Overpass (Rio Dell Hwy) import numpy as np import quakeio import quakeio.processing as spec # %config InlineBackend.figure_formats = ['svg'] # file_name = \"../dat/tomsplace_26nov2006_ce54730p.zip\" file_name = \"../dat/RioDell_Petrolia_Processed_Data.zip\" collection = quakeio.read(file_name, \"csmip.zip\" ) System Identification Case 1 : Input in transverse direction, output in transverse direction Input channels: 3; Output channels: 7 Case 2 : Input in longitudinal direction, output in longitudinal direction Input channels: 1; Output channel: 11 Case 3 : Input in longitudinal direction, output in vertical direction Considering that the bridge is similar to a frame in the longitudinal direction, shaking along this direction results in long. translational accelerations as well as bending & rotation of the deck, causing vertical accelerations on deck nodes. Case 3 makes use of this behavior to identify the long. mode. The influence vector of long. ground motions on vertical accelerations is zero, which is a concern, but this is still a useful case. Input channels: 1; Output channels: 6 Case 4 : Input in longitudinal direction, output in longitudinal & vertical directions. This is a case that can only be applied to OKID-ERA-DC. Therefore, it is the same as Case 3 in TFE, and similar to Case 3 in OKID-ERA-DC, except that the output channels is a combination of longitudinal & vertical channels. Input channels: 1; Output channels: 6 Case 5 : Input in vertical direction, output in vertical direction Input channels: 2; Output channel: 6 cases = { \"1\" : ( \"3\" , \"7\" ), \"2\" : ( \"2\" , \"11\" ), \"3\" : ( \"1\" , \"6\" ), \"4\" : ( \"2\" , \"6\" ) } The TransferFunction class is used to compute the transfer function between two channels at a specified damping ratio. for pair in cases.values(): inp = collection.at(channel = pair[ 0 ]) out = collection.at(channel = pair[ 1 ]) tf = spec.TransferFunction((inp,out), damping = [ 0.001 , 0.01 ]).plot() for component in collection.components: spec.Spectrum(component, damping = [ 0.0 , 0.01 ]).plot() spec.Spectrum(bot. long , damping = [ 0.0 , 0.01 ]).spect(bot. long ).shape --------------------------------------------------------------------------- NameError Traceback (most recent call last) /tmp/ipykernel_2714/326875978.py in <module> ----> 1 spec.Spectrum(bot.long, damping=[0.0, 0.01]).spect(bot.long).shape NameError: name 'bot' is not defined motion. long .veloc.data[ - 1 ] component.keys()","title":"System Identification (Painter Street Overpass)\n"},{"location":"tools/quakeio/schemas/","text":"Schemas QuakeSeries QuakeComponent","title":"Schemas\n"},{"location":"tools/quakeio/schemas/collection/","text":"QuakeCollection Properties Property Type Required Nullable Defined by motions array Required cannot be null QuakeCollection Additional Properties Any Optional can be null motions motions is required Type: an array of merged types ( Details ) cannot be null defined in: QuakeCollection motions Type an array of merged types ( Details ) motions Default Value The default value is: [] Additional Properties Additional properties are allowed and do not have to follow a specific schema","title":"QuakeCollection Properties\n"},{"location":"tools/quakeio/schemas/component/","text":"QuakeMotion Properties Property Type Required Nullable Defined by location string Optional cannot be null QuakeMotion filter.bandpass.limit_high number Optional cannot be null QuakeMotion station_no string Optional cannot be null QuakeMotion azimuth string Required cannot be null QuakeMotion instr_period number Optional cannot be null QuakeMotion instr_period.units string Optional cannot be null QuakeMotion peak_accel number Required cannot be null QuakeMotion peak_accel.units string Required cannot be null QuakeMotion accel.time_step number Optional cannot be null QuakeMotion peak_accel.time number Required cannot be null QuakeMotion peak_veloc number Required cannot be null QuakeMotion peak_veloc.units string Required cannot be null QuakeMotion peak_veloc.time number Required cannot be null QuakeMotion peak_displ number Required cannot be null QuakeMotion peak_displ.units string Required cannot be null QuakeMotion peak_displ.time number Required cannot be null QuakeMotion init_displ number Optional cannot be null QuakeMotion init_displ.units string Optional cannot be null QuakeMotion init_veloc number Optional cannot be null QuakeMotion init_veloc.units string Optional cannot be null QuakeMotion file_name string Optional cannot be null QuakeMotion Additional Properties Any Optional can be null location Number identifying station at which the data was recorded. location is optional Type: string ( Location ) cannot be null defined in: QuakeMotion location Type string ( Location ) filter.bandpass.limit_high Upper cutoff point for band-pass filter. filter.bandpass.limit_high is optional Type: number ( Band-pass filter high cutoff. ) cannot be null defined in: QuakeMotion filter.bandpass.limit_high Type number ( Band-pass filter high cutoff. ) station_no Number identifying station at which the data was recorded. station_no is optional Type: string ( Station number ) cannot be null defined in: QuakeMotion station_no Type string ( Station number ) azimuth azimuth is required Type: string ( Azimuth ) cannot be null defined in: QuakeMotion azimuth Type string ( Azimuth ) azimuth Examples \"37.691N, 122.099W\" instr_period instr_period is optional Type: number ( Instrument period ) cannot be null defined in: QuakeMotion instr_period Type number ( Instrument period ) instr_period Examples 0.0047 instr_period.units instr_period.units is optional Type: string ( Instrument period units ) cannot be null defined in: QuakeMotion instr_period.units Type string ( Instrument period units ) instr_period.units Examples \"sec\" peak_accel peak_accel is required Type: number ( Peak acceleration ) cannot be null defined in: QuakeMotion peak_accel Type number ( Peak acceleration ) peak_accel Examples 17.433 peak_accel.units peak_accel.units is required Type: string ( Peak acceleration units ) cannot be null defined in: QuakeMotion peak_accel.units Type string ( Peak acceleration units ) peak_accel.units Examples \"cm/sec/sec\" accel.time_step accel.time_step is optional Type: number ( Time step of acceleration data ) cannot be null defined in: QuakeMotion accel.time_step Type number ( Time step of acceleration data ) peak_accel.time peak_accel.time is required Type: number ( Time of peak acceleration ) cannot be null defined in: QuakeMotion peak_accel.time Type number ( Time of peak acceleration ) peak_accel.time Examples 20.27 peak_veloc peak_veloc is required Type: number ( Peak velocity ) cannot be null defined in: QuakeMotion peak_veloc Type number ( Peak velocity ) peak_veloc Examples 0.205 peak_veloc.units peak_veloc.units is required Type: string ( peak_veloc.units ) cannot be null defined in: QuakeMotion peak_veloc.units Type string ( peak_veloc.units ) peak_veloc.units Examples \"cm/sec\" peak_veloc.time peak_veloc.time is required Type: number ( Time of peak velocity ) cannot be null defined in: QuakeMotion peak_veloc.time Type number ( Time of peak velocity ) peak_displ peak_displ is required Type: number ( Peak displacement ) cannot be null defined in: QuakeMotion peak_displ Type number ( Peak displacement ) peak_displ.units peak_displ.units is required Type: string ( peak_displ.units ) cannot be null defined in: QuakeMotion peak_displ.units Type string ( peak_displ.units ) peak_displ.units Examples \"cm\" peak_displ.time peak_displ.time is required Type: number ( Time of peak displacement ) cannot be null defined in: QuakeMotion peak_displ.time Type number ( Time of peak displacement ) peak_displ.time Examples 20.27 init_displ init_displ is optional Type: number ( Initial displacement ) cannot be null defined in: QuakeMotion init_displ Type number ( Initial displacement ) init_displ.units Units init_displ.units is optional Type: string ( init_displ.units ) cannot be null defined in: QuakeMotion init_displ.units Type string ( init_displ.units ) init_displ.units Examples \"cm/sec\" init_veloc init_veloc is optional Type: number ( Initial velocity ) cannot be null defined in: QuakeMotion init_veloc Type number ( Initial velocity ) init_veloc.units Units init_veloc.units is optional Type: string ( init_veloc.units ) cannot be null defined in: QuakeMotion init_veloc.units Type string ( init_veloc.units ) init_veloc.units Examples \"cm/sec\" file_name file_name is optional Type: string ( Source file ) cannot be null defined in: QuakeMotion file_name Type string ( Source file ) Additional Properties Additional properties are allowed and do not have to follow a specific schema","title":"QuakeMotion Properties\n"},{"location":"tools/quakeio/schemas/filter/","text":"QuakeFilter Properties Property Type Required Nullable Defined by filter_type string Required cannot be null QuakeFilter point number Optional cannot be null QuakeFilter point.units string Optional cannot be null QuakeFilter limit_low number Optional cannot be null QuakeFilter limit_high number Optional cannot be null QuakeFilter limit.units string Optional cannot be null QuakeFilter Additional Properties Any Optional can be null filter_type filter_type is required Type: string ( The filter_type schema ) cannot be null defined in: QuakeFilter filter_type Type string ( The filter_type schema ) point point is optional Type: number ( The point schema ) cannot be null defined in: QuakeFilter point Type number ( The point schema ) point.units point.units is optional Type: string ( The point.units schema ) cannot be null defined in: QuakeFilter point.units Type string ( The point.units schema ) limit_low limit_low is optional Type: number ( The limit_low schema ) cannot be null defined in: QuakeFilter limit_low Type number ( The limit_low schema ) limit_high limit_high is optional Type: number ( The limit_high schema ) cannot be null defined in: QuakeFilter limit_high Type number ( The limit_high schema ) limit.units limit.units is optional Type: string ( The limit.units schema ) cannot be null defined in: QuakeFilter limit.units Type string ( The limit.units schema ) Additional Properties Additional properties are allowed and do not have to follow a specific schema","title":"QuakeFilter Properties\n"},{"location":"tools/quakeio/schemas/series/","text":"QuakeSeries Properties Property Type Required Nullable Defined by peak_value number Optional cannot be null QuakeSeries units string Required cannot be null QuakeSeries peak_time number Optional cannot be null QuakeSeries shape integer Required cannot be null QuakeSeries time_step number Required cannot be null QuakeSeries data array Optional cannot be null QuakeSeries Additional Properties Any Optional can be null peak_value peak_value is optional Type: number ( Peak value ) cannot be null defined in: QuakeSeries peak_value Type number ( Peak value ) units units is required Type: string ( Series units ) cannot be null defined in: QuakeSeries units Type string ( Series units ) peak_time peak_time is optional Type: number ( Time of peak value ) cannot be null defined in: QuakeSeries peak_time Type number ( Time of peak value ) shape shape is required Type: integer ( Serise shape ) cannot be null defined in: QuakeSeries shape Type integer ( Serise shape ) time_step time_step is required Type: number ( Time step ) cannot be null defined in: QuakeSeries time_step Type number ( Time step ) data data is optional Type: unknown[] cannot be null defined in: QuakeSeries data Type unknown[] data Default Value The default value is: [] Additional Properties Additional properties are allowed and do not have to follow a specific schema","title":"QuakeSeries Properties\n"}]}